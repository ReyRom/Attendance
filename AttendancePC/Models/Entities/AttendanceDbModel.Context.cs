//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AttendancePC.Models.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class AttendanceEntities : DbContext
    {
        public AttendanceEntities()
            : base("name=AttendanceEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Day> Days { get; set; }
        public virtual DbSet<Lesson> Lessons { get; set; }
        public virtual DbSet<Schedule> Schedules { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<Subject> Subjects { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<Guest> Guests { get; set; }
        public virtual DbSet<LessonAttend> LessonAttends { get; set; }
        public virtual DbSet<AttendanceSumView> AttendanceSumViews { get; set; }
        public virtual DbSet<Editor> Editors { get; set; }
        public virtual DbSet<User> Users { get; set; }
    
        public virtual int SP_Dynamic_Pivot(string tableSRC, string columnName, string field, string fieldRows, string functionType, string condition, string outputTable)
        {
            var tableSRCParameter = tableSRC != null ?
                new ObjectParameter("TableSRC", tableSRC) :
                new ObjectParameter("TableSRC", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("ColumnName", columnName) :
                new ObjectParameter("ColumnName", typeof(string));
    
            var fieldParameter = field != null ?
                new ObjectParameter("Field", field) :
                new ObjectParameter("Field", typeof(string));
    
            var fieldRowsParameter = fieldRows != null ?
                new ObjectParameter("FieldRows", fieldRows) :
                new ObjectParameter("FieldRows", typeof(string));
    
            var functionTypeParameter = functionType != null ?
                new ObjectParameter("FunctionType", functionType) :
                new ObjectParameter("FunctionType", typeof(string));
    
            var conditionParameter = condition != null ?
                new ObjectParameter("Condition", condition) :
                new ObjectParameter("Condition", typeof(string));
    
            var outputTableParameter = outputTable != null ?
                new ObjectParameter("OutputTable", outputTable) :
                new ObjectParameter("OutputTable", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Dynamic_Pivot", tableSRCParameter, columnNameParameter, fieldParameter, fieldRowsParameter, functionTypeParameter, conditionParameter, outputTableParameter);
        }
    
        public virtual int MissingsByMonth(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MissingsByMonth", dateParameter);
        }
    
        public virtual int AddGuest(string login, Nullable<bool> isPrime)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var isPrimeParameter = isPrime.HasValue ?
                new ObjectParameter("isPrime", isPrime) :
                new ObjectParameter("isPrime", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddGuest", loginParameter, isPrimeParameter);
        }
    
        public virtual int AddRedactor(string login, string password)
        {
            var loginParameter = login != null ?
                new ObjectParameter("login", login) :
                new ObjectParameter("login", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddRedactor", loginParameter, passwordParameter);
        }
    }
}
